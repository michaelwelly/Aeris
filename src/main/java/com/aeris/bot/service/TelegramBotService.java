package com.aeris.bot.service;

import com.aeris.bot.model.Order;
import com.aeris.bot.model.RestaurantTable;
import com.aeris.bot.model.SlotAvailability;
import com.aeris.bot.model.User;
import com.aeris.bot.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendLocation;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.math.BigDecimal;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

@Service
public class TelegramBotService extends TelegramLongPollingBot {


    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    private final UserService userService;
    private final OrderService orderService;
    private final RestaurantTableService restaurantTableService;
    private final SlotAvailabilityService slotAvailabilityService;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;
    @Autowired
    private UserRepository userRepository;

    public TelegramBotService(UserService userService, OrderService orderService, RestaurantTableService restaurantTableService, SlotAvailabilityService slotAvailabilityService) {
        this.userService = userService;
        this.orderService = orderService;
        this.restaurantTableService = restaurantTableService;
        this.slotAvailabilityService = slotAvailabilityService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }
    @Override
    public String getBotToken() {
        return botToken;
    }
    @Override
    public void onUpdateReceived(Update update) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            String chatId = update.getMessage().getChatId().toString();

            if (messageText.equalsIgnoreCase("/start")) {
                handleStartCommand(chatId, update.getMessage().getFrom());
            } else if (messageText.equalsIgnoreCase("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
                sendMainMenu(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
            } else if (messageText.equalsIgnoreCase("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")) {
                sendBookingMenu(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            } else if (messageText.equalsIgnoreCase("–ú–µ–Ω—é")) {
                sendMenuMain(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é "–ú–µ–Ω—é"
            } else if (messageText.equalsIgnoreCase("–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")) {
                handleCancelBooking(chatId); // –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            } else if (messageText.equalsIgnoreCase("–ê–¥—Ä–µ—Å")) {
                sendAddress(chatId); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–∞
            } else if (messageText.equalsIgnoreCase("–ò–Ω—Ç–µ—Ä—å–µ—Ä")) {
                sendInteriorMenu(chatId); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ
            } else if (messageText.equalsIgnoreCase("–ê—Ñ–∏—à–∞")) {
                sendEventsMenu(chatId); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ñ–∏—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            } else {
                handleUserMessage(chatId, messageText); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        else if (update.hasCallbackQuery()) {
            String chatId = update.getCallbackQuery().getMessage().getChatId().toString();
            String callbackData = update.getCallbackQuery().getData();

            // –ü–µ—Ä–µ–¥–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            handleCallbackQuery(chatId, callbackData);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        else if (update.hasMessage() && update.getMessage().hasPhoto()) {
            String chatId = update.getMessage().getChatId().toString();
            handlePhoto(chatId, update.getMessage().getPhoto());
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
        else if (update.hasMessage() && update.getMessage().hasLocation()) {
            String chatId = update.getMessage().getChatId().toString();
            handleLocation(chatId, update.getMessage().getLocation());
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        else if (update.hasMessage() && update.getMessage().hasDocument()) {
            String chatId = update.getMessage().getChatId().toString();
            handleDocument(chatId, update.getMessage().getDocument());
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        else if (update.hasMessage() && update.getMessage().hasVoice()) {
            String chatId = update.getMessage().getChatId().toString();
            handleVoice(chatId, update.getMessage().getVoice());
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        else if (update.hasMessage() && update.getMessage().hasVideo()) {
            String chatId = update.getMessage().getChatId().toString();
            handleVideo(chatId, update.getMessage().getVideo());
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        else if (update.hasMessage()) {
            String chatId = update.getMessage().getChatId().toString();
            handleUnsupportedMessage(chatId, update.getMessage());
        }
    }

    private void handlePhoto(String chatId, List<PhotoSize> photos) {
        sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ! –ú—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.");
    }
    private void handleLocation(String chatId, Location location) {
        double latitude = location.getLatitude();
        double longitude = location.getLongitude();
        sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é! –®–∏—Ä–æ—Ç–∞: " + latitude + ", –î–æ–ª–≥–æ—Ç–∞: " + longitude);
    }
    private void handleDocument(String chatId, Document document) {
        sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã.");
    }
    private void handleCancelBooking(String chatId) {
        try {
            Long userId = getUserId(chatId);
            orderService.cancelOrder(userId);
            sendMessage(chatId, "‚ùå –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            sendMainMenu(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            e.printStackTrace();
        }
    }
    private void handleVoice(String chatId, Voice voice) {
        sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
    }
    private void handleVideo(String chatId, Video video) {
        sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
    }
    private void handleUnsupportedMessage(String chatId, Message message) {
        sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π.");
    }

    private void handleStartCommand(String chatId, org.telegram.telegrambots.meta.api.objects.User user) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userService.saveUser(user);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            String welcomeMessage = """
            –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª—å—Ñ—Ä–µ–¥. –Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
            üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.
            üìã –£–∑–Ω–∞—Ç—å –Ω–∞—à–µ –º–µ–Ω—é, –∏–Ω—Ç–µ—Ä—å–µ—Ä –∏ –∞—Ñ–∏—à—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
            üó∫ –ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏.
            
            –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, –∞ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∑–∞ –≤–∞—Å!
            
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
            """;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
            sendMainMenu(chatId, welcomeMessage);
        } catch (RuntimeException e) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            String alreadyRegisteredMessage = """
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! 
            –Ø —É–∂–µ –∑–Ω–∞—é –≤–∞—Å –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–Ω–æ–≤–∞:
            üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫.
            üìã –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é, –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏ –∞—Ñ–∏—à–µ–π.
            üó∫ –ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.

            –í—ã–±–∏—Ä–∞–π—Ç–µ –≤ –º–µ–Ω—é, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∑–∞ –≤–∞—Å!
            """;

            sendMainMenu(chatId, alreadyRegisteredMessage);
        }
    }

    private void handleUserMessage(String chatId, String messageText) {
        switch (messageText) {
            case "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                sendBookingMenu(chatId);
                break;

            case "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
            case "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è":
            case "–í—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç":
            case "–í—ã–±—Ä–∞—Ç—å –∑–æ–Ω—É":
            case "–í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞":
            case "–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
                handleBookingMenuSelection(chatId, messageText);
              break;

            case "–ú–µ–Ω—é":
                sendMenuMain(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é "–ú–µ–Ω—é"
                break;

            case "–ë–∞—Ä":
            case "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é":
            case "–≠–ª–µ–º–µ–Ω—Ç—ã":
            case "–ö—É—Ö–Ω—è":
            case "–í–∏–Ω–Ω—ã–π –∑–∞–ª":
                handleMenuSelection(chatId, messageText);
                break;

            case "–ê–¥—Ä–µ—Å":
                sendAddress(chatId);
                break;

            case "–ò–Ω—Ç–µ—Ä—å–µ—Ä":
                sendInteriorMenu(chatId);
                break;

            case "–ê—Ñ–∏—à–∞":
                sendEventsMenu(chatId);
                break;

            case "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                sendMessage(chatId, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
                break;

            case "–ö–µ–π—Ç–µ—Ä–∏–Ω–≥":
                sendMessage(chatId, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
                break;

            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                sendMainMenu(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
                break;

            default:
                sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
                sendMainMenu(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
                break;
        }
    }
    private void sendMenuMain(String chatId) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è 5 –∫–∞—Ä—Ç
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ë–∞—Ä");
        row1.add("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–≠–ª–µ–º–µ–Ω—Ç—ã");
        row2.add("–ö—É—Ö–Ω—è");
        row2.add("–í–∏–Ω–Ω—ã–π –∑–∞–ª");

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        KeyboardRow row3 = new KeyboardRow();
        row3.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∫–∞—Ä—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å:\n" +
                "1. –ë–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ–π\n" +
                "2. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–º –º–µ–Ω—é\n" +
                "3. –ö–∞—Ä—Ç–æ–π \"–≠–ª–µ–º–µ–Ω—Ç—ã\"\n" +
                "4. –ö–∞—Ä—Ç–æ–π –∫—É—Ö–Ω–∏\n" +
                "5. –í–∏–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:");
        message.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void handleMenuSelection(String chatId, String menuSelection) {
        switch (menuSelection) {
            case "–ë–∞—Ä":
                sendBarMenu(chatId);
                break;
            case "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é":
                sendDailyMenu(chatId);
                break;
            case "–≠–ª–µ–º–µ–Ω—Ç—ã":
                sendElementsMenu(chatId);
                break;
            case "–ö—É—Ö–Ω—è":
                sendKitchenMenu(chatId);
                break;
            case "–í–∏–Ω–Ω—ã–π –∑–∞–ª":
                sendWineRoomMenu(chatId);
                break;
            default:
                sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
        }
    }
    private void sendBarMenu(String chatId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
        String description = "*–ë–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞*\n\n" +
                "_–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ —Å–µ–±–µ –≤—Å–µ —Å—Ç–∏—Ö–∏–∏ –ø—Ä–∏—Ä–æ–¥—ã –∏ —Å–æ–∑–¥–∞–µ—Ç AERIS. –°–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞ 7 —Å–µ–∫—É–Ω–¥_";
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        File file = new File("/Users/michaelwelly/Desktop/AERISMENU/BAR CARD.pdf");
        if (file.exists() && file.isFile()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(file));
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –±–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }}
    }
    private void sendDailyMenu(String chatId) {
        // –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        String description = "*ùêÄùêÑùêëùêàùêí ùêÉùêÄùêàùêãùêò ùêåùêÑùêçùêî*\n\n" +
                "_AERIS ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é!_\n" +
                "–í –±—É–¥–Ω–∏–µ –¥–Ω–∏ —Å *11:45 –¥–æ 16:00* –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä–∏ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ –æ–±–µ–¥. " +
                "–õ–∞–∫–æ–Ω–∏—á–Ω–æ–µ –º–µ–Ω—é –≤ —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —á–∏—Å—Ç—ã–π –≤–∫—É—Å ‚Äî " +
                "–∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–≤–æ–¥ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º.\n\n" +
                "üç∑ *–í–∏–Ω–æ –î–Ω—è* ‚Äî –Ω–æ–≤–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤ –≤–∞—à–µ–º –±–æ–∫–∞–ª–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ –ø—Ä–∏—è—Ç–Ω–æ–π —Ü–µ–Ω–µ. –ú—ã –∏—Å–∫—É—Å–Ω–æ –ø–æ–¥–±–∏—Ä–∞–µ–º –≤–∏–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–æ —Å—Ç–∞–ª–æ –∏–¥–µ–∞–ª—å–Ω—ã–º –∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç–æ–º –≤–∞—à–µ–≥–æ –æ–±–µ–¥–∞.\n\n" +
                "–ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Å—É–µ—Ç—É –±—É–¥–Ω–µ–π ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ AERIS –∑–∞ –≤–∫—É—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–Ω–∏—Ç—Å—è!\n\n" +
                "*ùêÄ ùêê ùêî ùêÄ | ùêà ùêÜ ùêç ùêà ùêí | ùêÄ ùêÑ ùêë | ùêì ùêÑ ùêë ùêë ùêÄ*\n\n";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        File imageFile = new File("/Users/michaelwelly/Desktop/AERISMENU/DAILY_MENU_IMAGE.png"); // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        if (imageFile.exists() && imageFile.isFile()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(imageFile));
            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –º–µ–Ω—é
        File file = new File("/Users/michaelwelly/Desktop/AERISMENU/DAILY MENU CARD.pdf");
        if (file.exists() && file.isFile()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(file));
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }
    private void sendElementsMenu(String chatId) {
        // –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –º–µ–Ω—é "–≠–ª–µ–º–µ–Ω—Ç—ã"
        String description = "*ELEMENTS*\n\n" +
                "_–ê–≤—Ç–æ—Ä—Å–∫–∞—è –∫–æ–∫—Ç–µ–π–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –º–æ—Ç–∏–≤–∞–º —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç–∏—Ö–∏–π, –æ—Ç –Ω–∞—à–µ–≥–æ —à–µ—Ñ-–±–∞—Ä–º–µ–Ω–∞ –î–∞–Ω–∏–∏–ª–∞ –ú–∞–ª–µ–Ω–∫–æ–≤–∏—á–∞._\n\n" +
                "–ö–æ–∫—Ç–µ–π–ª–∏ *–æ–≥–Ω—è* ‚Äî —ç—Ç–æ —è—Ä–∫–∏–µ –≤—Å–ø—ã—à–∫–∏ –≤–∫—É—Å–∞, –≥–¥–µ —Å–ª–∞–¥–æ—Å—Ç—å –∏ –∫–∏—Å–ª–∏–Ω–∫–∞ –∏—Å–∫—Ä—è—Ç—Å—è –Ω–∞ —Ñ–æ–Ω–µ –ø—Ä—è–Ω—ã—Ö –∞–∫—Ü–µ–Ω—Ç–æ–≤, –∫–∞–∫ –æ–≥–æ–Ω—å –Ω–∞ —É–≥–ª—è—Ö. " +
                "–¢–∞–±–∞—Å–∫–æ –≤ ¬´–§–∞—Ä—Ä–æ¬ª –∏ –ø–µ—Ä–µ—á–Ω—ã–π –ª–∏–∫–µ—Ä –≤ ¬´–õ–∞–¥–æ–Ω–µ¬ª –ø—Ä–∏–¥–∞—é—Ç –æ—Å—Ç—Ä–æ—Ç—É, –∞ —Ñ—Ä—É–∫—Ç—ã –∏ –º—è—Ç–∞ —Å–º—è–≥—á–∞—é—Ç –∂–∞—Ä, –¥–æ–±–∞–≤–ª—è—è —Å–≤–µ–∂–µ—Å—Ç–∏. –ö–æ–Ω—Ç—Ä–∞—Å—Ç—ã –∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—é—Ç –Ω–∞–ø–∏—Ç–∫–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –ø—ã–ª–∞—é—â–∏–µ —ç–º–æ—Ü–∏—è–º–∏.\n\n" +
                "–ö–æ–∫—Ç–µ–π–ª–∏ *–≤–æ–∑–¥—É—Ö–∞* ‚Äî –ª–µ–≥–∫–∏, –∫–∞–∫ –æ–±–ª–∞–∫–∞. –ö–æ–∫–æ—Å–æ–≤–∞—è –ø–µ–Ω–∞ –≤ ¬´–ó–µ—Ñ–∏—Ä–µ¬ª –∏ –∫—Ä–µ–º–æ–≤–æ—Å—Ç—å ¬´–í–∞—é-–í–∞—Ç–∞¬ª –ø—Ä–∏–¥–∞—é—Ç –∏–º –Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç—å, –∞ –≤–∫—É—Å—ã –±–∞–ª–∞–Ω—Å–∏—Ä—É—é—Ç –º–µ–∂–¥—É —Å–ª–∞–¥–æ—Å—Ç—å—é, –∫–∏—Å–ª–∏–Ω–∫–æ–π –∏ —Ç—Ä–∞–≤—è–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏. –≠—Ç–∏ –Ω–∞–ø–∏—Ç–∫–∏, –±—É–¥—Ç–æ —à–µ–ø–æ—Ç –≤–µ—Ç—Ä–∞, —Å–∫—Ä—ã–≤–∞—é—Ç –≥–ª—É–±–∏–Ω—É –∑–∞ –º—è–≥–∫–æ—Å—Ç—å—é, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–Ω–∫–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ.\n\n" +
                "–ö–æ–∫—Ç–µ–π–ª–∏ *–∑–µ–º–ª–∏* ‚Äî –∑–≤—É—á–∞—Ç, –∫–∞–∫ —ç—Ö–æ –ø—Ä–∏—Ä–æ–¥—ã. –î—Ä–µ–≤–µ—Å–Ω—ã–µ –∏ –ø—Ä—è–Ω—ã–µ –Ω–æ—Ç—ã, —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–∞–≤—è–Ω—ã–º –¥–∂–∏–Ω–æ–º, –¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–∞–¥–æ—Å—Ç—å—é —Ü–≤–µ—Ç–æ–≤ –∏ —Ñ—Ä—É–∫—Ç–æ–≤, —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏–≥—Ä–∞—é—Ç —Å–ª–æ–≤–Ω–æ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏ –Ω–∞ –ª–µ—Å–Ω–æ–π –ø–æ–ª—è–Ω–µ. –í–æ–∑–¥—É—à–Ω–∞—è –ø–µ–Ω–∞ ¬´–ù–∏–º—Ñ—ã¬ª –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å ¬´–§–ª–æ—Ä—ã¬ª —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≥–∞—Ä–º–æ–Ω–∏—é –∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—É—é –≥–ª—É–±–∏–Ω—É.\n\n" +
                "–ö–æ–∫—Ç–µ–π–ª–∏ *–≤–æ–¥—ã* ‚Äî —Ç–µ–∫—É—Ç, –∫–∞–∫ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–µ —Ä—É—á—å–∏. –§—Ä—É–∫—Ç–æ–≤–∞—è —Å–ª–∞–¥–æ—Å—Ç—å –∏ –∫–∏—Å–ª–∏–Ω–∫–∞ —Å—Ç—Ä—É—è—Ç—Å—è –≤ –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π —Ç–µ–∫—Å—Ç—É—Ä–µ, –∞ —Å–æ–ª–æ–Ω–æ–≤–∞—Ç—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –≤ ¬´–ê–≥–≤–µ¬ª –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑. –≠—Ç–∏ –æ—Å–≤–µ–∂–∞—é—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ —Å–ª–æ–≤–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –ª–µ—Ç–Ω–∏—Ö –≤–µ—á–µ—Ä–æ–≤ –∏ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.\n\n" +
                "*ùêÄ ùêê ùêî ùêÄ | ùêà ùêÜ ùêç ùêà ùêí | ùêÄ ùêÑ ùêë | ùêì ùêÑ ùêë ùêë ùêÄ*\n\n";
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        File imageFile = new File("/Users/michaelwelly/Desktop/AERISMENU/ELEMENTS_IMAGE.png"); // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        if (imageFile.exists() && imageFile.isFile()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(imageFile));
            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ–Ω—é \"–≠–ª–µ–º–µ–Ω—Ç—ã\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª —Å –º–µ–Ω—é "–≠–ª–µ–º–µ–Ω—Ç—ã"
        File file = new File("/Users/michaelwelly/Desktop/AERISMENU/ELEMENTS CARD.pdf");
        if (file.exists() && file.isFile()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(file));
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –º–µ–Ω—é \"–≠–ª–µ–º–µ–Ω—Ç—ã\" –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }
    private void sendKitchenMenu(String chatId) {
        // –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—é "–ö—É—Ö–Ω—è"
        String description = "*ùêÄùêÑùêëùêàùêí ùêäùêàùêìùêÇùêáùêÑùêç*\n\n" +
                "_–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è ‚Äì —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –ª—É—á—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π, —Ä–æ–¥–æ–º –∏–∑ –î—Ä–µ–≤–Ω–µ–π –ì—Ä–µ—Ü–∏–∏, –†–∏–º–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∏—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏._\n\n" +
                "*–û–ª–∏–≤–∞* ‚Äì —Å–∏–º–≤–æ–ª –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è, –º–∏—Ä–∞ –∏ –∏–∑–æ–±–∏–ª–∏—è, –¥–∞—Ä –±–æ–≥–æ–≤ –ª—é–¥—è–º. –ù–µ–∑–∞–º–µ–Ω–∏–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–ª–æ–¥–æ—Å—Ç–∏ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. –ú–∞—Å–ª–æ –æ–ª–∏–≤—ã ‚Äì –±–µ—Å—Ü–µ–Ω–Ω—ã–π —Å–æ–∫ –∂–∏–∑–Ω–∏, –¥–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–º —Å—Ç–∏—Ö–∏—è–º–∏ –∑–µ–º–ª–∏ –∏ —Å–æ–ª–Ω—Ü–∞, –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–Ω–∫–æ–≥–æ –∏ –ø—Ä—è–Ω–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞, —Ç–∞–∫ –ø—Ä–∏—Å—É—â–µ–≥–æ –±–ª—é–¥–∞–º —Å–æ–ª–Ω–µ—á–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ï–≤—Ä–æ–ø—ã.\n\n" +
                "*–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏* ‚Äì —ç–Ω–µ—Ä–≥–∏—è —Å–æ–ª–Ω—Ü–∞ –∏ –∑–µ–º–ª–∏, –∑–∞–ø–∞—Å—ë–Ω–Ω–∞—è –≤ —è—Ä–∫–∏—Ö –∏ —Å–æ—á–Ω—ã—Ö –ø–ª–æ–¥–∞—Ö, –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n\n" +
                "*–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã* ‚Äì –¥–∞—Ä—ã –º–æ—Ä—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º–æ –∑–∞ —Å–µ–±—è. –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞ –∏ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã—Ö –∫–∏—Å–ª–æ—Ç, –∑–∞–ª–æ–≥ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è, –∫—Ä–µ–ø–æ—Å—Ç–∏ —Ç–µ–ª–∞ –∏ —Å—Ç—Ä–∞—Å—Ç–∏ –∫ –∂–∏–∑–Ω–∏.\n\n" +
                "*–ö—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ* ‚Äì –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞, –∂–µ–ª–µ–∑–∞, —Å–≤—è–∑—å —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ —Å–æ —Å—Ç–∏—Ö–∏–µ–π –∑–µ–º–ª–∏, –Ω—É –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∏ —Å —á–µ–º –Ω–µ —Å—Ä–∞–≤–Ω–∏–º–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞, –ø—Ä–∏ –æ–¥–Ω–æ–π –º—ã—Å–ª–∏ –æ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è –∞–ø–ø–µ—Ç–∏—Ç.\n\n" +
                "*–ü–∞—Å—Ç–∞* ‚Äì —ç–Ω–µ—Ä–≥–∏—è —Å–æ–ª–Ω—Ü–∞, –∑–µ–º–ª–∏ –∏ –≤–æ–¥—ã, –∑–∞–ø–∞—Å—ë–Ω–Ω–∞—è –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.\n\n" +
                "–ê –≤—Å—ë –≤–º–µ—Å—Ç–µ ‚Äì –≥–∞—Ä–º–æ–Ω–∏—è –≤–∫—É—Å–æ–≤, —Ä–æ–∂–¥–∞—é—â–∏—Ö —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ.\n\n" +
                "‚ü° *–û–ó–ù–ê–ö–û–ú–ò–¢–¨–°–Ø –° –ú–ï–ù–Æ*  ‚ü°\n\n" +
                "*ùêÄ ùêê ùêî ùêÄ | ùêà ùêÜ ùêç ùêà ùêí | ùêÄ ùêÑ ùêë | ùêì ùêÑ ùêë ùêë ùêÄ*\n\n";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        File imageFile = new File("/Users/michaelwelly/Desktop/AERISMENU/KITCHEN_IMAGE.png"); // –ó–∞–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if (imageFile.exists() && imageFile.isFile()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(imageFile));
            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª —Å –º–µ–Ω—é "–ö—É—Ö–Ω—è"
        File file = new File("/Users/michaelwelly/Desktop/AERISMENU/KITCHEN CARD.pdf");
        if (file.exists() && file.isFile()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(file));
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            sendErrorFileNotFound(chatId, "–ö—É—Ö–Ω—è");
        }
    }
    private void sendWineRoomMenu(String chatId) {
        // –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –º–µ–Ω—é "–í–∏–Ω–Ω—ã–π –∑–∞–ª"
        String description = "*ùêÄùêÑùêëùêàùêí ùêñùêàùêçùêÑ ùêëùêéùêéùêå*\n\n" +
                "_–ê–Ω–∫–ª–∞–≤ (–æ—Ç –ª–∞—Ç. Inclavatus, –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–π ‚Äì –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ) –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –∂–∞—Ä–∫–æ–≥–æ —Å–æ–ª–Ω—Ü–∞, —Ä–∞–∑–ª–∏—Ç–æ–≥–æ –ø–æ –±—É—Ç—ã–ª–∫–∞–º: –≤–∏–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –¥–æ 10 –ø–µ—Ä—Å–æ–Ω._\n\n" +
                "–ü–æ —Å–æ–≤–º–µ—Å—Ç–∏—Ç–µ–ª—å—Å—Ç–≤—É –æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ä—Ç–∞–ª–æ–º –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –º–∏—Ä–∞, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –≤–∏–Ω–æ.\n\n" +
                "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –∂–µ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, —Ä–æ–∂–¥–∞—é—â–∏–º –ª—É—á—à–∏–µ –≤–∏–Ω–∞, —Å—Ç–∞–Ω–µ—Ç —Å–æ–º–µ–ª—å–µ –≥–∞—Å—Ç—Ä–æ–±–∞—Ä–∞ *‚ÄúAERIS‚Äù*. –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–ª—é—á–µ–π –æ—Ç –ø–æ—Ä—Ç–∞–ª–∞ ‚Äì –±–æ–ª–µ–µ –≤–æ—Å—å–º–∏–¥–µ—Å—è—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π, –∫–∞–∫ —à–∏—Ä–æ–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–µ, —Ç–∞–∫ –∏ –∂–¥—É—â–∏—Ö —Å–≤–æ–∏—Ö –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–æ–≤. –ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É: –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–º, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏, –≤–∏–Ω–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞ –∏–ª–∏ –∏–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n" +
                "–¢–µ–º, –∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é, –Ω–æ –ª–∏—à—å –∂–µ–ª–∞–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –ø—Ä–æ–≥—É–ª–∫—É –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —á–∞—Å—Ç–∏—Ü–µ–π –∂–∏–¥–∫–æ–≥–æ —Å–æ–ª–Ω—Ü–∞, —Å–æ–º–µ–ª—å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —á—É—Ç–∫–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å –¥–∞—Ä–∞–º–∏ –∑–µ–º–ª–∏ –∏ –º–æ—Ä—è.\n\n" +
                "*Wine Pairing* ‚Äì –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ –∫ –±–ª—é–¥–∞–º –Ω–∞ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–º, –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–º–µ–ª—å–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Å—Ç—è.\n\n";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        File imageFile = new File("/Users/michaelwelly/Desktop/AERISMENU/WINE_ROOM_IMAGE.png"); // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        if (imageFile.exists() && imageFile.isFile()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(imageFile));
            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ–Ω—é \"–í–∏–Ω–Ω—ã–π –∑–∞–ª\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª —Å –º–µ–Ω—é "–í–∏–Ω–Ω—ã–π –∑–∞–ª"
        File file = new File("/Users/michaelwelly/Desktop/AERISMENU/WINE ROOM CARD.pdf");
        if (file.exists() && file.isFile()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(file));
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId);
            errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –º–µ–Ω—é \"–í–∏–Ω–Ω—ã–π –∑–∞–ª\" –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            try {
                execute(errorMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }
    private void sendInteriorMenu(String chatId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
        String description = "*AERIS INTERIOR*\n\n" +
                "–í –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞—à–ª–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≥–∞—Ä–º–æ–Ω–∏–∏ —á–µ—Ç—ã—Ä—ë—Ö —Å—Ç–∏—Ö–∏–π, –∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ—â—ë –∞–Ω—Ç–∏—á–Ω—ã–º –≥—Ä–µ–∫–∞–º. " +
                "–≠–ª–ª–∏–Ω—ã –ø–æ –ø—Ä–∞–≤—É —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–ø–æ–ª–æ–∂–Ω–∏–∫–∞–º–∏ —Ç–∞–∫–∏—Ö –Ω–∞—É–∫, –∫–∞–∫ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è, –≥–µ–æ–º–µ—Ç—Ä–∏—è, —Ñ–∏–∑–∏–∫–∞, –∞–ª—Ö–∏–º–∏—è. –ò–º–µ–Ω–Ω–æ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –Ω–∞ –≤–µ–∫–∞ –∏ —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏—è.\n\n" +
                "–ì–∞—Ä–º–æ–Ω–∏—è —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ –±–∞–ª–∞–Ω—Å–∞, –±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ ‚Äì —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≤–µ–∫–∞–º–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –ª—ë–≥–∫–æ—Å—Ç–∏ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ –≤–µ—Å–æ–º–æ—Å—Ç–∏ –º—Ä–∞–º–æ—Ä–∞, —Ç–µ–ø–ª–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ –ø—Ä–æ—Ö–ª–∞–¥—ã —Å–æ—á–Ω–æ–π –∑–µ–ª–µ–Ω–∏. –í—Å—ë —ç—Ç–æ –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –ø—Ä–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä ¬´AERIS¬ª.\n\n" +
                "–ü–æ—Ä—Ü–∏—é —ç–∫–∑–æ—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∏—Ö–∏–π –≤ –∏—Ö –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ, –Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –ø—Ä–æ—á—Ç–µ–Ω–∏–∏: —Å—Ç–µ–Ω–∞ –≤–æ–¥—ã –∏ —è–∑—ã–∫–∏ –ø–ª–∞–º–µ–Ω–∏, —Å–æ—Å–µ–¥—Å—Ç–≤—É—é—â–∏–µ –±–æ–∫ –æ –±–æ–∫ –∏ –¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n" +
                "–ö–æ–º–ø–∞–Ω–∏—è –∏–∑ 4-5 —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–º —Å—Ç–æ–ª–æ–º –∏ —Ç–µ—Ç-–∞-—Ç–µ—Ç –≤–µ—á–µ—Ä —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –∫–æ–∫—Ç–µ–π–ª—è–º–∏ –∑–∞ –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–æ–π, –æ–∫—Ç–µ—Ç —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –≤–∏–Ω –∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ñ–æ—Ä—É–º –Ω–∞ 12 –ø–µ—Ä—Å–æ–Ω ‚Äì –≤—Å–µ–º —Ñ–æ—Ä–º–∞–º –∏ —á–∏—Å–ª–∞–º –Ω–∞–π–¥—ë—Ç—Å—è –ø–æ–¥–æ–±–∞—é—â–µ–µ –º–µ—Å—Ç–æ –≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ ¬´AERIS¬ª.\n\n";

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        File photoFile = new File("/Users/michaelwelly/Desktop/AERISMENU/INTERIOR.jpg");
        if (photoFile.exists() && photoFile.isFile()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(photoFile));

            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            sendErrorFileNotFound(chatId, "–ò–Ω—Ç–µ—Ä—å–µ—Ä (—Ñ–æ—Ç–æ)");
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        File videoFile = new File("/Users/michaelwelly/Desktop/AERISMENU/INTERIOR.mp4");
        if (videoFile.exists() && videoFile.isFile()) {
            SendDocument video = new SendDocument();
            video.setChatId(chatId);
            video.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(videoFile));

            try {
                execute(video);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            sendErrorFileNotFound(chatId, "–ò–Ω—Ç–µ—Ä—å–µ—Ä (–≤–∏–¥–µ–æ)");
        }
    }
    private void sendEventsMenu(String chatId) {
        // –û–ø–∏—Å–∞–Ω–∏–µ –∞—Ñ–∏—à–∏
        String description = "*AERIS Events*\n\n" +
                "–í –Ω–∞—à–µ–º –≥–∞—Å—Ç—Ä–æ–±–∞—Ä–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —è—Ä–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å! " +
                "–£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –≤–µ—á–µ—Ä–∞—Ö –∂–∏–≤–æ–π –º—É–∑—ã–∫–∏ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –¥–µ–≥—É—Å—Ç–∞—Ü–∏—è—Ö. " +
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –Ω–∞ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ: [@aeris_gastrobar](https://t.me/aeris_gastrobar).\n\n";

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        File photoFile = new File("/Users/michaelwelly/Desktop/AERISMENU/EVENTS.jpg");
        if (photoFile.exists() && photoFile.isFile()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(photoFile));

            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            sendErrorFileNotFound(chatId, "–ê—Ñ–∏—à–∞ (—Ñ–æ—Ç–æ)");
        }
    }
    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendAddress(String chatId) {
        // –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        String addressText = "üìç *–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å,*\n\n" +
                "–ù–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: *—É–ª. –ú–∞–º–∏–Ω–∞ –°–∏–±–∏—Ä—è–∫–∞ 58, –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥.*\n\n" +
                "_–≠—Ç–æ –º–µ—Å—Ç–æ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π_: –∑–¥–µ—Å—å –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –≥–¥–µ —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –≤—ã–¥–∞—é—â–∏–µ—Å—è —É–º—ã –≥–æ—Ä–æ–¥–∞, " +
                "–∞ –ø–æ–∑–∂–µ ‚Äî —É—é—Ç–Ω—ã–π —Å–∞–ª–æ–Ω, –≥–¥–µ –æ–±—Å—É–∂–¥–∞–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –º—É–∑—ã–∫—É.\n\n" +
                "*–°–µ–≥–æ–¥–Ω—è —ç—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω AERIS* ‚Äî –º–µ—Å—Ç–æ, —Å–æ—á–µ—Ç–∞—é—â–µ–µ —É—Ç–æ–Ω—á–µ–Ω–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º.\n\n" +
                "üîó [AERIS –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö](https://yandex.com/maps/-/CHAlAWN~)\n";

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(addressText);
        message.enableMarkdown(true);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        sendLocation(chatId, 56.839104, 60.606564); // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    }
    private void sendLocation(String chatId, double latitude, double longitude) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        SendLocation sendLocation = new SendLocation();
        sendLocation.setChatId(chatId);
        sendLocation.setLatitude(latitude);
        sendLocation.setLongitude(longitude);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        try {
            execute(sendLocation);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendErrorFileNotFound(String chatId, String menuName) {
        SendMessage errorMessage = new SendMessage();
        errorMessage.setChatId(chatId);
        errorMessage.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –º–µ–Ω—é \"" + menuName + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        try {
            execute(errorMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendMainMenu(String chatId, String text) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
        row1.add("–ú–µ–Ω—é");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ê–¥—Ä–µ—Å");
        row2.add("–ò–Ω—Ç–µ—Ä—å–µ—Ä");
        row2.add("–ê—Ñ–∏—à–∞");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å");
        row3.add("–ö–µ–π—Ç–µ—Ä–∏–Ω–≥");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ".
     */
    private void sendBookingMenu(String chatId) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–í—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("–í—ã–±—Ä–∞—Ç—å –∑–æ–Ω—É");
        row4.add("–í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞");

        KeyboardRow row5 = new KeyboardRow();
        row5.add("–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"); // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

        KeyboardRow row6 = new KeyboardRow();
        row6.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"); // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);
        keyboard.add(row5);
        keyboard.add(row6);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        String description = """
        ü§µ *–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.*\n\n
        ‚è≥ *–í–∞—à —Å—Ç–æ–ª –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 2 —á–∞—Å–∞.*\n
        üï∞ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è*:\n
        ‚Ä¢ *–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –ß–µ—Ç–≤–µ—Ä–≥:* —Å 11:45 –¥–æ 02:00\n
        ‚Ä¢ *–ü—è—Ç–Ω–∏—Ü–∞ –∏ –°—É–±–±–æ—Ç–∞:* —Å 11:45 –¥–æ 04:00\n
        ‚Ä¢ *–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:* —Å 11:45 –¥–æ 02:00\n\n
        üìå *–û—Å–æ–±–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ–¥–µ–ª–∏*:\n
        ‚Ä¢ *SUNDAY WINE* ‚Äî –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: —Å–∫–∏–¥–∫–∞ *20%* –Ω–∞ –≤—Å–µ –≤–∏–Ω–∞ –≤ –±—É—Ç—ã–ª–∫–∞—Ö. üç∑\n
        ‚Ä¢ *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ* ‚Äî –ü—è—Ç–Ω–∏—Ü–∞ –∏ –°—É–±–±–æ—Ç–∞: *–¥–∏–¥–∂–µ–π-—Å–µ—Ç—ã —Å 21:00.* üéµ\n
        ‚Ä¢ *Daily Menu* ‚Äî –ë—É–¥–Ω–∏–µ –¥–Ω–∏ —Å 11:45 –¥–æ 16:00: –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é –∏ –≤–∏–Ω–æ –¥–Ω—è. üçΩ\n\n
        üëâ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.*\n
        """;

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true); // –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        message.setReplyMarkup(replyKeyboardMarkup);


        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void handleBookingMenuSelection(String chatId, String bookingMenuSelection) {
        switch (bookingMenuSelection) {
            case "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
                sendDateSelection(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
                break;
            case "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è":
                try {
                    Long userId = getUserId(chatId);
                    if (orderService.getOrderDateTime(userId) == null) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.");
                    } else {
                        sendTimeSelection(chatId, orderService.getOrderDateTime(userId).toLocalDate().toString());
                    }
                } catch (Exception e) {
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    e.printStackTrace();
                }
                break;
            case "–í—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç":
                try {
                    Long userId = getUserId(chatId);
                    LocalDate selectedDate = orderService.getOrderDateTime(userId).toLocalDate();
                    sendSlotSelection(chatId, selectedDate.toString());
                } catch (Exception e) {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Å–ª–æ—Ç–∞.");
                }
                break;
            case "–í—ã–±—Ä–∞—Ç—å –∑–æ–Ω—É":
                sendZoneSelection(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∑–æ–Ω—ã
                break;
            case "–í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞":
                try {
                    Long userId = getUserId(chatId);
                    String selectedZone = orderService.getOrderZone(userId);
                    if (selectedZone == null) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Å—Ç–æ–ª–∞.");
                    } else {
                        sendTableSelection(chatId, selectedZone); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∞
                    }
                } catch (Exception e) {
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    e.printStackTrace();
                }
                break;
            case "–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
                try {
                    Long userId = getUserId(chatId);
                    orderService.cancelOrder(userId);
                    sendMessage(chatId, "‚ùå –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.");
                } catch (Exception e) {
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    e.printStackTrace();
                }
                break;
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                sendMainMenu(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
        }
    }
    private String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) return input;
        return input.substring(0, 1).toUpperCase() + input.substring(1).toLowerCase();
    }
    private void sendDateSelection(String chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìÖ –ü—Ä–æ—à—É –≤–∞—Å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ 14 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        for (int i = 0; i < 14; i++) {
            LocalDate date = LocalDate.now().plusDays(i);
            String dayOfWeek = date.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("ru"));
            InlineKeyboardButton button = new InlineKeyboardButton();

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            button.setText(dayOfWeek + " üìÖ " + date);
            button.setCallbackData("select_date:" + date);
            rows.add(List.of(button));
        }

        keyboardMarkup.setKeyboard(rows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendTimeSelection(String chatId, String selectedDate) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        LocalDate date = LocalDate.parse(selectedDate);
        DayOfWeek dayOfWeek = date.getDayOfWeek();
        LocalTime startTime = LocalTime.of(11, 45);
        LocalTime endTime = (dayOfWeek == DayOfWeek.FRIDAY || dayOfWeek == DayOfWeek.SATURDAY)
                ? LocalTime.of(4, 0).plusHours(24) // –î–ª—è –ø—è—Ç–Ω–∏—Ü—ã –∏ —Å—É–±–±–æ—Ç—ã –¥–æ 4 —É—Ç—Ä–∞
                : LocalTime.of(2, 0).plusHours(24); // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –¥–æ 2 —É—Ç—Ä–∞

        message.setText("üóì –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: " + formatDateForUser(date) +
                "\nüï∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å: —Å " + startTime + " –¥–æ " + endTime +
                ".\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. ‚è≥ –ë—Ä–æ–Ω—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ 2 —á–∞—Å–∞.");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ SlotAvailabilityService
        List<SlotAvailability> availableSlots = slotAvailabilityService.getAvailableSlots(date);

        if (availableSlots.isEmpty()) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.");
            return;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        for (SlotAvailability slot : availableSlots) {
            LocalTime slotTime = slot.getTimeSlot();
            if (slotTime.isBefore(startTime) || slotTime.isAfter(endTime)) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                continue;
            }

            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("üïí " + slotTime.toString());
            button.setCallbackData("select_time:" + selectedDate + "T" + slotTime.toString());
            rows.add(List.of(button));
        }

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        if (rows.isEmpty()) {
            sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.");
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboardMarkup.setKeyboard(rows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }
    private void sendSlotSelection(String chatId, String selectedDate) {
        LocalDate date = LocalDate.parse(selectedDate);

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
        List<SlotAvailability> slots = slotAvailabilityService.getAvailableSlots(date);
        if (slots.isEmpty()) {
            slotAvailabilityService.generateSlotsForDate(
                    date,
                    restaurantTableService.getAllTables(),
                    LocalTime.of(11, 0),
                    LocalTime.of(23, 0),
                    new BigDecimal("500.00") // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
            );
            slots = slotAvailabilityService.getAvailableSlots(date);
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (SlotAvailability slot : slots) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("üïí " + slot.getTimeSlot() + " - " + slot.getPrice() + "‚ÇΩ");
            button.setCallbackData("select_slot:" + slot.getId());
            rows.add(List.of(button));
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    private void sendTableSelection(String chatId, String selectedZone) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω–µ
        List<RestaurantTable> availableTables = restaurantTableService.getAvailableTablesByZone(selectedZone);

        if (availableTables.isEmpty()) {
            // –ï—Å–ª–∏ –≤ –∑–æ–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
            sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–æ–Ω–µ \"" + selectedZone + "\" —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∑–æ–Ω—É.");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (RestaurantTable table : availableTables) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("–°—Ç–æ–ª–∏–∫ ‚Ññ" + table.getTableNumber() + " (" + table.getCapacity() + " —á–µ–ª.)");
            button.setCallbackData("select_table:" + table.getId());
            rows.add(List.of(button));
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–æ–Ω—ã");
        backButton.setCallbackData("select_zone");

        rows.add(List.of(backButton));

        keyboardMarkup.setKeyboard(rows);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –≤ –∑–æ–Ω–µ \"" + selectedZone + "\":");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    private String generateDayDescription(String selectedDate) {
        LocalDate date = LocalDate.parse(selectedDate);
        DayOfWeek dayOfWeek = date.getDayOfWeek();

        switch (dayOfWeek) {
            case MONDAY:
                return "üåû –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –¥–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π! –≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.";
            case TUESDAY:
                return "üî• –í—Ç–æ—Ä–Ω–∏–∫ ‚Äî –¥–µ–Ω—å –æ–≥–Ω–µ–Ω–Ω–æ–π —Ä–µ—à–∏–º–æ—Å—Ç–∏. –°–æ–ª–Ω—Ü–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á.";
            case WEDNESDAY:
                return "üí® –°—Ä–µ–¥–∞ ‚Äî –¥–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è. –ü—Ä–∏—Ä–æ–¥–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —è—Å–Ω–æ—Å—Ç–∏ –º—ã—Å–ª–µ–π –∏ –ø—Ä–∏–Ω—è—Ç–∏—é —Ä–µ—à–µ–Ω–∏–π.";
            case THURSDAY:
                return "üå≥ –ß–µ—Ç–≤–µ—Ä–≥ ‚Äî –¥–µ–Ω—å —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è. –≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –æ—Ç–¥—ã—Ö–∞.";
            case FRIDAY:
                return "‚ú® –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî –¥–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –≠—Ç–æ –≤—Ä–µ–º—è –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ø–ª–æ–¥–∞–º–∏ –≤–∞—à–∏—Ö —Ç—Ä—É–¥–æ–≤.";
            case SATURDAY:
                return "üåô –°—É–±–±–æ—Ç–∞ ‚Äî –¥–µ–Ω—å –ø–æ–∫–æ—è –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Ä–∞–¥–æ—Å—Ç—è–º–∏ –∂–∏–∑–Ω–∏.";
            case SUNDAY:
                return "üç∑ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –¥–µ–Ω—å —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏—è –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏. –ù–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –º–æ–º–µ–Ω—Ç–∞–º–∏ —Å—á–∞—Å—Ç—å—è.";
            default:
                return "–°–µ–≥–æ–¥–Ω—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –æ—Å–æ–±–µ–Ω–Ω—ã–º!";
        }
    }
    private void handleCallbackQuery(String chatId, String callbackData) {
        try {
            Long userId = getUserId(chatId); // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if (callbackData.startsWith("select_date:")) {
                // –í—ã–±–æ—Ä –¥–∞—Ç—ã
                String selectedDate = callbackData.split(":")[1];
                orderService.updateOrderDate(userId, LocalDate.parse(selectedDate).atStartOfDay());
                sendMessage(chatId, "üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " + formatSelectedDate(selectedDate) +
                        ". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.");
                sendTimeSelection(chatId, selectedDate);

            } else if (callbackData.startsWith("select_time:")) {
                // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
                String selectedTime = callbackData.split(":")[1];
                LocalDate selectedDate = LocalDate.parse(orderService.getOrderDateTime(userId).toLocalDate().toString());

                if (selectedDate == null) {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.");
                    return;
                }

                LocalDateTime bookingDateTime = LocalDateTime.of(selectedDate, LocalTime.parse(selectedTime));
                orderService.updateOrderSlot(userId, bookingDateTime);
                sendMessage(chatId, "üïí –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: " + selectedTime +
                        ". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç.");
                sendSlotSelection(chatId, selectedDate.toString());

            } else if (callbackData.startsWith("select_slot:")) {
                // –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞
                Long slotId = Long.parseLong(callbackData.split(":")[1]);
                SlotAvailability slot = slotAvailabilityService.getSlotById(slotId);

                if (!slotAvailabilityService.isSlotAvailable(slot.getId(), slot.getDate(), slot.getTimeSlot())) {
                    sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
                    return;
                }

                orderService.updateOrderSlot(userId, slot.getDate().atTime(slot.getTimeSlot()));
                sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–ª–æ—Ç –Ω–∞ " +
                        formatDateTimeForUser(slot.getDate().atTime(slot.getTimeSlot())) +
                        ". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É.");
                sendZoneSelection(chatId);

            } else if (callbackData.startsWith("select_zone:")) {
                // –í—ã–±–æ—Ä –∑–æ–Ω—ã
                String selectedZone = callbackData.split(":")[1];
                orderService.updateOrderZone(userId, selectedZone);

                sendMessage(chatId, "üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–æ–Ω—É: " + selectedZone +
                        ". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞.");
                sendTableSelection(chatId, selectedZone);

            } else if (callbackData.startsWith("select_table:")) {
                // –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∞
                Long tableId = Long.parseLong(callbackData.split(":")[1]);
                RestaurantTable table = restaurantTableService.getTableById(tableId);

                if (!orderService.isTableAvailable(tableId, orderService.getOrderDateTime(userId))) {
                    sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
                    return;
                }

                orderService.updateOrderTable(userId, tableId);
                sendMessage(chatId, "ü™ë –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ–ª–∏–∫ ‚Ññ" + table.getTableNumber() +
                        " –≤ –∑–æ–Ω–µ \"" + table.getZone() + "\".\n" +
                        "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.");
                confirmOrder(chatId, table.getId(), orderService.getOrderDateTime(userId));

            } else if (callbackData.equals("cancel_booking")) {
                // –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                orderService.cancelOrder(userId);
                sendMessage(chatId, "‚ùå –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.");
                sendMainMenu(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");

            } else if (callbackData.equals("main_menu")) {
                // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                sendMainMenu(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");

            } else {
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            e.printStackTrace();
        }
    }
    private String formatDateTimeForUser(LocalDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, dd MMMM yyyy, HH:mm", Locale.forLanguageTag("ru"));
        return dateTime.format(formatter);
    }
    private String formatDateForUser(LocalDate date) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, dd MMMM", Locale.forLanguageTag("ru"));
        return date.format(formatter);
    }
    private String formatSelectedDate(String selectedDate) {
        LocalDate date = LocalDate.parse(selectedDate);
        String dayOfWeek = date.getDayOfWeek()
                .getDisplayName(TextStyle.FULL, Locale.forLanguageTag("ru"));
        return dayOfWeek + ", " + date.format(DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale.forLanguageTag("ru")));
    }
    private void saveDateTimeToDatabase(String chatId, LocalDateTime bookingDateTime) {
        Long userId = getUserId(chatId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º OrderService –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        orderService.createOrder(userId, null, bookingDateTime, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞");
    }
    private void askForBookingDateTime(String chatId) {
        String description = """
        ü§µ *–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.*\n\n
        ‚è≥ *–í–∞—à —Å—Ç–æ–ª –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 2 —á–∞—Å–∞.*\n
        üï∞ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è*:\n
        ‚Ä¢ *–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –ß–µ—Ç–≤–µ—Ä–≥:* —Å 11:45 –¥–æ 02:00\n
        ‚Ä¢ *–ü—è—Ç–Ω–∏—Ü–∞ –∏ –°—É–±–±–æ—Ç–∞:* —Å 11:45 –¥–æ 04:00\n
        ‚Ä¢ *–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:* —Å 11:45 –¥–æ 02:00\n\n
        üìå *–û—Å–æ–±–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ–¥–µ–ª–∏*:\n
        ‚Ä¢ *SUNDAY WINE* ‚Äî –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: —Å–∫–∏–¥–∫–∞ *20%* –Ω–∞ –≤—Å–µ –≤–∏–Ω–∞ –≤ –±—É—Ç—ã–ª–∫–∞—Ö. üç∑\n
        ‚Ä¢ *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ* ‚Äî –ü—è—Ç–Ω–∏—Ü–∞ –∏ –°—É–±–±–æ—Ç–∞: *–¥–∏–¥–∂–µ–π-—Å–µ—Ç—ã —Å 21:00.* üéµ\n
        ‚Ä¢ *Daily Menu* ‚Äî –ë—É–¥–Ω–∏–µ –¥–Ω–∏ —Å 11:45 –¥–æ 16:00: –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é –∏ –≤–∏–Ω–æ –¥–Ω—è. üçΩ\n\n
        üëâ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.*\n
        """;

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(description);
        message.enableMarkdown(true); // –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        InlineKeyboardButton selectDateButton = new InlineKeyboardButton();
        selectDateButton.setText("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É");
        selectDateButton.setCallbackData("select_date");

        keyboardMarkup.setKeyboard(List.of(List.of(selectDateButton)));
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    private void sendZonePlan(String chatId) {
        File planFile = new File("/Users/michaelwelly/Desktop/AERISMENU/AERIS PLAN.pdf");
        if (planFile.exists()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(planFile));
            document.setCaption("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–ª–∞–Ω–æ–º –∑–∞–ª–∞. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞.");
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        // –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –≤—ã–±–æ—Ä –∑–æ–Ω—ã
        askForZoneSelection(chatId);
    }

    private void confirmOrder(String chatId, Order order) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(String.format("–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: %s\n–ó–æ–Ω–∞: %s\n–°—Ç–æ–ª: %s\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                order.getBookingDateTime().toString(),
                order.getTable().getZone(),
                order.getTable().getTableNumber()));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
        File confirmationImage = new File("/path/to/confirmation-image.jpg");
        if (confirmationImage.exists()) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new org.telegram.telegrambots.meta.api.objects.InputFile(confirmationImage));
            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ö–æ—Å—Ç–µ—Å—Å
        notifyHostess(order);
    }
    private void notifyHostess(Order order) {
        String hostessChatId = "HOSTESS_CHAT_ID";
        SendMessage message = new SendMessage();
        message.setChatId(hostessChatId);
        message.setText(String.format("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: %s\n–ó–æ–Ω–∞: %s\n–°—Ç–æ–ª: %s\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.",
                order.getBookingDateTime().toString(),
                order.getTable().getZone(),
                order.getTable().getTableNumber(),
                order.getComment()));
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void askForZoneSelection(String chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–æ–Ω–∞ 1') –∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—Ç–æ–ª 3').");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void createOrder(String chatId, Long userId, Long tableId, LocalDateTime bookingDateTime, String comment) {
        try {
            Order order = orderService.createOrder(userId, tableId, bookingDateTime, comment);
            confirmOrder(chatId, order);
        } catch (EntityNotFoundException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        } catch (IllegalStateException e) {
            sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
        }
    }
    private void checkTableAvailability(String chatId, Long tableId, LocalDateTime bookingDateTime) {
        if (orderService.isTableAvailable(tableId, bookingDateTime)) {
            sendMessage(chatId, "–°—Ç–æ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.");
        } else {
            sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–æ–ª –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å—Ç–æ–ª.");
        }
    }
    private void confirmOrderByHostess(String chatId, Long orderId) {
        Order order = orderService.updateOrderStatus(orderId, "CONFIRMED");
        sendMessage(chatId, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.");
        notifyUserAboutConfirmation(order);
    }
    private void rejectOrderByHostess(String chatId, Long orderId, String reason) {
        Order order = orderService.updateOrderStatus(orderId, "REJECTED");
        sendMessage(chatId, "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.");
        notifyUserAboutRejection(order, reason);
    }
    private void notifyUserAboutConfirmation(Order order) {
        String userChatId = order.getUser().getTelegramId();
        sendMessage(userChatId, "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ñ–¥–µ–º –≤–∞—Å.");
    }
    private void notifyUserAboutRejection(Order order, String reason) {
        String userChatId = order.getUser().getTelegramId();
        sendMessage(userChatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: " + reason);
    }
    private void handleDateTimeInput(String chatId, String userInput) {
        try {
            LocalDateTime bookingDateTime = LocalDateTime.parse(userInput, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

            if (!isWithinWorkingHours(bookingDateTime)) {
                sendMessage(chatId, "–†–µ—Å—Ç–æ—Ä–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 11:00 –¥–æ 23:00. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Redis)
            cacheOrderInfo(chatId, "bookingDateTime", bookingDateTime.toString());

            sendZoneSelection(chatId);
        } catch (DateTimeParseException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'yyyy-MM-dd HH:mm'.");
        }
    }
    private void sendZoneSelection(String chatId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Å –ø–ª–∞–Ω–æ–º –∑–∞–ª–∞
        File planFile = new File("/Users/michaelwelly/Desktop/AERISMENU/PLAN.pdf");
        if (planFile.exists()) {
            SendDocument document = new SendDocument();
            document.setChatId(chatId);
            document.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(planFile));
            document.setCaption("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–ª–∞–Ω–æ–º –∑–∞–ª–∞, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:");
            try {
                execute(document);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            sendMessage(chatId, "–ü–ª–∞–Ω –∑–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∑–æ–Ω–∞–º–∏
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü—Ä–∏–º–µ—Ä –∑–æ–Ω
        String[] zones = {"–ë–∞—Ä", "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª", "–¢–µ—Ä—Ä–∞—Å–∞", "VIP-–∑–æ–Ω–∞"};
        for (String zone : zones) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(zone);
            button.setCallbackData("select_zone:" + zone);
            rows.add(List.of(button));
        }

        keyboardMarkup.setKeyboard(rows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void confirmOrder(String chatId, Long tableId, LocalDateTime bookingDateTime) {
        RestaurantTable table = restaurantTableService.getTableById(tableId);

        sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑:\n" +
                "–î–∞—Ç–∞: " + bookingDateTime.toLocalDate() + "\n" +
                "–í—Ä–µ–º—è: " + bookingDateTime.toLocalTime() + "\n" +
                "–ó–æ–Ω–∞: " + table.getZone() + "\n" +
                "–°—Ç–æ–ª–∏–∫ ‚Ññ" + table.getTableNumber() + "\n\n" +
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ö–æ—Å—Ç–µ—Å—Å.");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ö–æ—Å—Ç–µ—Å—Å
        notifyHostess(chatId, table, bookingDateTime);
    }
    private void notifyHostess(String chatId, RestaurantTable table, LocalDateTime bookingDateTime) {
        // –ó–∞–º–µ–Ω–∏—Ç–µ "HOSTESS_CHAT_ID" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–∏–±–æ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        String hostessChatId = "HOSTESS_CHAT_ID";

        sendMessage(hostessChatId, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n" +
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + chatId + "\n" +
                "–î–∞—Ç–∞: " + bookingDateTime.toLocalDate() + "\n" +
                "–í—Ä–µ–º—è: " + bookingDateTime.toLocalTime() + "\n" +
                "–ó–æ–Ω–∞: " + table.getZone() + "\n" +
                "–°—Ç–æ–ª–∏–∫ ‚Ññ" + table.getTableNumber());
    }
    private void sendZoneOptions(String chatId) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ë–∞—Ä");
        row1.add("–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¢–µ—Ä—Ä–∞—Å–∞");
        row2.add("VIP-–∑–æ–Ω–∞");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void cacheOrderInfo(String chatId, String key, String value) {
        // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RedisTemplate
        String redisKey = "order:" + chatId;
        redisTemplate.opsForHash().put(redisKey, key, value);
    }
    private String getCachedValue(String chatId, String key) {
        String redisKey = "order:" + chatId;
        Object value = redisTemplate.opsForHash().get(redisKey, key);
        return value != null ? value.toString() : null;
    }
    private Long getCachedTableId(String chatId) {
        String value = getCachedValue(chatId, "tableId");
        return value != null ? Long.parseLong(value) : null;
    }
    private LocalDateTime getCachedBookingDateTime(String chatId) {
        String value = getCachedValue(chatId, "bookingDateTime");
        return value != null ? LocalDateTime.parse(value) : null;
    }
    private Long getUserId(String chatId) {
        User user = userRepository.findByTelegramId(chatId)
                .orElseThrow(() -> new EntityNotFoundException("User not found with Telegram ID: " + chatId));
        return user.getId();
    }
    private void handleTableSelection(String chatId, String tableSelection) {
        Long tableId = parseTableIdFromInput(tableSelection);
        if (tableId == null) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π.");
            return;
        }

        cacheOrderInfo(chatId, "tableId", tableId.toString());
        LocalDateTime bookingDateTime = getCachedBookingDateTime(chatId);
        sendMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ–ª–∏–∫ ‚Ññ" + tableId + ". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
        confirmOrder(chatId, tableId, bookingDateTime);
    }
    private Long parseTableIdFromInput(String input) {
        try {
            if (input.startsWith("–°—Ç–æ–ª–∏–∫ ‚Ññ")) {
                String numberStr = input.replace("–°—Ç–æ–ª–∏–∫ ‚Ññ", "").trim();
                return Long.parseLong(numberStr);
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return null;
    }
    private void finalizeOrder(String chatId) {
        Long userId = getUserId(chatId);
        Long tableId = getCachedTableId(chatId);
        LocalDateTime bookingDateTime = getCachedBookingDateTime(chatId);

        try {
            Order order = orderService.createOrder(userId, tableId, bookingDateTime, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot");
            sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.");
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }
    private void sendTableOptions(String chatId, List<RestaurantTable> tables) {
        // –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–æ–≤
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        for (RestaurantTable table : tables) {
            KeyboardRow row = new KeyboardRow();
            row.add("–°—Ç–æ–ª–∏–∫ ‚Ññ" + table.getTableNumber());
            rows.add(row);
        }

        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
  }
    private boolean isWithinWorkingHours(LocalDateTime dateTime) {
        LocalTime time = dateTime.toLocalTime();
        return !time.isBefore(LocalTime.of(11, 0)) && !time.isAfter(LocalTime.of(23, 0));
    }
    private void handleBookingTimeSelection(String chatId, String inputDateTime) {
        try {
            LocalDateTime bookingDateTime = LocalDateTime.parse(inputDateTime);

            if (!isWithinWorkingHours(bookingDateTime)) {
                sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (11:00 - 23:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                return;
            }

            cacheOrderInfo(chatId, "bookingDateTime", bookingDateTime.toString());
            sendMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏: " + bookingDateTime.toLocalDate() + " " + bookingDateTime.toLocalTime() + ". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É.");
            sendZoneOptions(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã
        } catch (DateTimeParseException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: yyyy-MM-ddTHH:mm.");
        }
    }
}